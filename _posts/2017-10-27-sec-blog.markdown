---
layout: post
title: "Js call,apply方法"
img: himalayan.jpg # Add image post (optional)
date: 2017-10-27 12:55:00 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
tag: [Js,call,函数]
---
在学习js对象的方法时，接触到函数的call，apply, bind方法，虽然之前也遇到过有关于它们的例子，但都不怎么理解，为什么会有这样的方法存在。
在csdn，博客园等等网站上浏览了各位前辈的解析，稍微整理了下：
 
 首先call方法是用来干嘛的，为什么会设计这种方法？有这样一段解释：为了改变某个函数运行时的context即上下文存在的，似乎并没读懂，好吧，就是为了改变函数内部this的指向的。
 这里强调一点：js的函数是存在这样一种概念：定义时上下文、运行时上下文、上下文是可改变的。
 call和apply两者的作用是一样的，就接收参数的方式不一样，举个例子：
                    var fun1=function(arg1,arg2){};
函数fun1定义如上，我们可以通过 fun1.call(this,1,2)或者fun1.apply(this,[1,2])来调用，其中this是你想指定的上下文（执行环境），它可以是任何一个js对象。
通过上面可以看出，call只需要把参数按照顺序传进去，而apply需把参数放在数组里再传进去
js中某个函数的参数数量是不固定的，因此要说适应条件的话，参数数量已知情况下用call，不确定时用apply，把参数push进数组然后传进去。当参数数量不确定时函数内部可通过arguments这个数组来便利所有参数。

常用实例：
1.       function add(a,b)
2.      {
3.       alert(a+b);
4.       };
5.      function sub(a,b)
6.       {
7.          alert(a-b);
8.      };
9.   add.call(this,1,2);//3
9.   add.call(sub,1,2);//

运行结果为3；即将add方法执行的上下文从window变成了sub，add方法中的this指向了sub
js中的函数其实是对象，函数名是对Function对象的引用。



       
